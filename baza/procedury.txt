CREATE OR replace TYPE studentssubjects AS object(
  subject_name     VARCHAR2 (256), 
  semester         NUMBER (2), 
  ects             NUMBER (2), 
  course_name      VARCHAR2 (256), 
  lecturer_name    VARCHAR2 (256), 
  lecturer_surname VARCHAR2 (256)); 
/
CREATE TYPE studentssubjects_tab AS TABLE OF studentssubjects;
  
  
/ 
create or replace 
FUNCTION select_student_subjects(studentId IN student.id%TYPE) 
RETURN studentssubjects_tab
IS 
  v_studentssubjects_tab studentssubjects_tab := studentssubjects_tab(); 
BEGIN 
    SELECT studentssubjects(subject.name, subject.semester, subject.ects, course.name, lecturer.name , lecturer.surname)
    bulk  collect      INTO v_studentssubjects_tab 
    FROM   subject 
           left join students_group_subject 
                  ON students_group_subject.subject_id = subject.id 
           left join students_group
                  ON students_group_subject.students_group_id = 
                     students_group.id 
           left join students_group_student 
                  ON students_group_student.students_group_id = 
                     students_group.id 
           left join student 
                  ON student.id = students_group_student.student_id 
           left join course 
                  ON course.id = students_group.course_id 
           left join lecturer 
                  ON lecturer.id = subject.lecturer_id 
    WHERE  student.id = studentId ; 

    RETURN v_studentssubjects_tab; 
END;
/

select select_student_subjects('1') from dual;




CREATE OR replace TYPE studentscourses AS object(
  course_name      VARCHAR2 (256));
/
CREATE TYPE studentscourses_tab AS TABLE OF studentscourses;
  
  
/ 
create or replace 
FUNCTION select_student_courses(studentId IN student.id%TYPE) 
RETURN studentscourses_tab
IS 
  v_studentscourses_tab studentscourses_tab := studentscourses_tab(); 
BEGIN 
    SELECT studentscourses(course.name)
    bulk  collect      INTO v_studentscourses_tab 
    FROM   course 
           LEFT JOIN students_group ON course.id = students_group.course_id
		   LEFT JOIN students_group_student ON students_group_student.students_group_id = students_group.id
		   LEFT JOIN student ON student.id = students_group_student.student_id 
		   WHERE  student.id = studentId ; 
    RETURN v_studentscourses_tab; 
END;
/

select select_student_courses('1') from dual;





CREATE OR replace TYPE studentsenrollments AS object(
  mark		       NUMBER (2,1), 
  issue_date       DATE, 
  subject_name     VARCHAR2 (256)); 
/
CREATE TYPE studentsenrollments_tab AS TABLE OF studentsenrollments;
  
  
/ 
create or replace 
FUNCTION select_student_enrollments(studentId IN student.id%TYPE) 
RETURN studentsenrollments_tab
IS 
  v_studentsenrollments_tab studentsenrollments_tab := studentsenrollments_tab(); 
BEGIN 
    SELECT studentsenrollments(enrollment.mark, enrollment.issue_date, subject.name)
    bulk  collect      INTO v_studentsenrollments_tab 
    FROM   enrollment 
            LEFT JOIN transcript ON enrollment.transcript_id = transcript.id
			LEFT JOIN student ON transcript.student_id = student.id
			LEFT JOIN subject ON enrollment.subject_id = subject.id
		   WHERE  student.id = studentId ; 
    RETURN v_studentsenrollments_tab; 
END;
/

select select_student_enrollments('1') from dual;







CREATE OR replace TYPE studentslecturers AS object(
	lecturer_name    VARCHAR2 (256), 
    lecturer_surname VARCHAR2 (256),
	subject_name     VARCHAR2 (256));
/
CREATE TYPE studentslecturers_tab AS TABLE OF studentslecturers;
  
  
/ 
create or replace 
FUNCTION select_student_lecturers(studentId IN student.id%TYPE) 
RETURN studentslecturers_tab
IS 
  v_studentslecturers_tab studentslecturers_tab := studentslecturers_tab(); 
BEGIN 
    SELECT studentslecturers(lecturer.name, lecturer.surname, subject.name)
    bulk  collect      INTO v_studentslecturers_tab 
    FROM   lecturer 
            LEFT JOIN subject ON lecturer.id = subject.lecturer_id
			LEFT JOIN students_group_subject ON students_group_subject.subject_id = subject.id
			LEFT JOIN students_group ON students_group_subject.students_group_id = students_group.id
			LEFT JOIN students_group_student ON students_group_student.students_group_id = students_group.id
		    LEFT JOIN student ON student.id = students_group_student.student_id 
		    WHERE  student.id = studentId ; 
    RETURN v_studentslecturers_tab; 
END;
/

select select_student_lecturers('1') from dual;






CREATE OR replace TYPE studentspartialmarks AS object(
	partialmark      NUMBER (2,1), 
    issuedate		 DATE,
	subject_name     VARCHAR2 (256));
/
CREATE TYPE studentspartialmarks_tab AS TABLE OF studentspartialmarks;
  
  
/ 
create or replace 
FUNCTION select_student_partialmarks(studentId IN student.id%TYPE) 
RETURN studentspartialmarks_tab
IS 
  v_studentspartialmarks_tab studentspartialmarks_tab := studentspartialmarks_tab(); 
BEGIN 
    SELECT studentspartialmarks(partial_mark.mark, partial_mark.issue_date, subject.name)
    bulk  collect      INTO v_studentspartialmarks_tab 
    FROM   partial_mark 
            LEFT JOIN transcript ON partial_mark.transcript_id = transcript.id
			LEFT JOIN student ON transcript.student_id = student.id
			LEFT JOIN subject ON partial_mark.subject_id = subject.id
		    WHERE  student.id = studentId ; 
    RETURN v_studentspartialmarks_tab; 
END;
/

select select_student_partialmarks('1') from dual;









CREATE OR replace TYPE studentsscheduledclasses AS object(
    classesdate		  DATE,
	subject_name      VARCHAR2 (256),
	classrom	      NUMBER(4));
/
CREATE TYPE studentsscheduledclasses_tab AS TABLE OF studentsscheduledclasses;
  
  
/ 
create or replace 
FUNCTION select_student_scheduledclasses(studentId IN student.id%TYPE) 
RETURN studentsscheduledclasses_tab
IS 
  v_studentsscheduledclasses_tab studentsscheduledclasses_tab := studentsscheduledclasses_tab(); 
BEGIN 
    SELECT studentsscheduledclasses(scheduled_classes.classes_date, subject.name, classroom.id)
    bulk  collect      INTO v_studentsscheduledclasses_tab 
    FROM   scheduled_classes 
            LEFT JOIN classroom ON scheduled_classes.classroom_id = classroom.id
			LEFT JOIN subject ON scheduled_classes.subject_id = subject.id
			LEFT JOIN students_group_subject ON students_group_subject.subject_id = subject.id
			LEFT JOIN students_group ON students_group_subject.students_group_id = students_group.id
			LEFT JOIN students_group_student ON students_group_student.students_group_id = students_group.id
			LEFT JOIN student ON students_group_student.student_id = student.id
		    WHERE  student.id = studentId ; 
    RETURN v_studentsscheduledclasses_tab; 
END;
/

select student_scheduledclasses('1') from dual;





CREATE OR replace TYPE lecturersscheduledclasses AS object(
    classesdate		  DATE,
	subject_name      VARCHAR2 (256),
	classrom	      NUMBER(4));
/
CREATE TYPE lecturersscheduledclasses_tab AS TABLE OF lecturersscheduledclasses;
  
  
/ 
create or replace 
FUNCTION lecturers_scheduledclasses(lecturerId IN lecturer.id%TYPE) 
RETURN lecturersscheduledclasses_tab
IS 
  v_lecturscheduledclasses_tab lecturersscheduledclasses_tab := lecturersscheduledclasses_tab(); 
BEGIN 
    SELECT lecturersscheduledclasses(scheduled_classes.classes_date, subject.name, classroom.id)
    bulk  collect      INTO v_lecturscheduledclasses_tab 
    FROM   scheduled_classes 
            LEFT JOIN classroom ON scheduled_classes.classroom_id = classroom.id
			LEFT JOIN subject ON scheduled_classes.subject_id = subject.id
			LEFT JOIN lecturer ON subject.lecturer_id = lecturer.id
		    WHERE  lecturer.id = lecturerId ; 
    RETURN v_lecturscheduledclasses_tab; 
END;
/

select lecturers_scheduledclasses('1') from dual;











CREATE OR replace TYPE lecturersstudents AS object(
	sname	         VARCHAR2 (256), 
    ssurname		 VARCHAR2 (256));
/
CREATE TYPE lecturersstudents_tab AS TABLE OF lecturersstudents;
  
  
/ 
create or replace 
FUNCTION select_lecturer_students(lecturerId IN lecturer.id%TYPE) 
RETURN lecturersstudents_tab
IS 
  v_lecturersstudents_tab lecturersstudents_tab := lecturersstudents_tab(); 
BEGIN 
    SELECT lecturersstudents(student.name, student.surname)
    bulk  collect      INTO v_lecturersstudents_tab 
    FROM   student 
            LEFT JOIN students_group_student ON students_group_student.student_id = student.id
			LEFT JOIN students_group ON students_group_student.students_group_id = students_group.id
			LEFT JOIN students_group_subject ON students_group_subject.students_group_id = students_group.id
			LEFT JOIN subject ON students_group_subject.subject_id = subject.id
			LEFT JOIN lecturer ON subject.lecturer_id = lecturer.id
		    WHERE  lecturer.id = lecturerId ; 
    RETURN v_lecturersstudents_tab; 
END;
/

select select_lecturer_students('1') from dual;








CREATE OR replace TYPE receivedmessages AS object(
	title	         VARCHAR2 (256), 
    content  		 VARCHAR2 (256),
	dispatchdate	 DATE, 
	sender	     	 VARCHAR2 (256));
/
CREATE TYPE receivedmessages_tab AS TABLE OF receivedmessages;
  
  
/ 
create or replace 
FUNCTION select_receivedmessages(userlogin IN app_user.login%TYPE) 
RETURN receivedmessages_tab
IS 
  v_receivedmessages_tab receivedmessages_tab := receivedmessages_tab(); 
BEGIN 
    SELECT receivedmessages(message.title, message.content, message.dispatch_date, message.sender_id)
    bulk  collect      INTO v_receivedmessages_tab 
    FROM   message 
            LEFT JOIN app_user ON message.receiver_id = app_user.login
		    WHERE  app_user.login = userlogin ; 
    RETURN v_receivedmessages_tab; 
END;
/

select select_receivedmessages('student') from dual;




CREATE OR replace TYPE sendedmessages AS object(
	title	         VARCHAR2 (256), 
    content  		 VARCHAR2 (256),
	dispatchdate	 DATE, 
	receiver	   	 VARCHAR2 (256));
/
CREATE TYPE sendedmessages_tab AS TABLE OF sendedmessages;
  
  
/ 
create or replace 
FUNCTION select_sendedmessages(userlogin IN app_user.login%TYPE) 
RETURN sendedmessages_tab
IS 
  v_sendedmessages_tab sendedmessages_tab := sendedmessages_tab(); 
BEGIN 
    SELECT sendedmessages(message.title, message.content, message.dispatch_date, message.sender_id)
    bulk  collect      INTO v_sendedmessages_tab 
    FROM   message 
            LEFT JOIN app_user ON message.receiver_id = app_user.login
		    WHERE  app_user.login = userlogin ; 
    RETURN v_sendedmessages_tab; 
END;
/

select select_sendedmessages('student') from dual;











CREATE OR replace TYPE applications AS object(
	title	         VARCHAR2 (256), 
    content  		 VARCHAR2 (256),
	dispatchdate	 DATE);
/
CREATE TYPE applications_tab AS TABLE OF applications;
  
  
/ 
create or replace 
FUNCTION select_applications(administratorId IN administrator.id%TYPE) 
RETURN applications_tab
IS 
  v_applications_tab applications_tab := applications_tab(); 
BEGIN 
    SELECT applications(application.title, application.content, application.dispatch_date)
    bulk  collect      INTO v_applications_tab 
    FROM   application 
            LEFT JOIN administrator ON application.administrator_id = administrator.id
			WHERE status = 'Nierozpatrzony' AND administrator.id = administratorId; 
    RETURN v_applications_tab; 
END;
/

select select_applications('1') from dual;








CREATE OR replace TYPE lecturersenrollments AS object(
  mark		       NUMBER (2,1), 
  issue_date       DATE, 
  subject_name     VARCHAR2 (256)); 
/
CREATE TYPE lecturersenrollments_tab AS TABLE OF lecturersenrollments;
  
  
/ 
create or replace 
FUNCTION select_lecturer_enrollments(lecturerId IN lecturer.id%TYPE) 
RETURN lecturersenrollments_tab
IS 
  v_lecturersenrollments_tab lecturersenrollments_tab := lecturersenrollments_tab(); 
BEGIN 
    SELECT lecturersenrollments(enrollment.mark, enrollment.issue_date, subject.name)
    bulk  collect      INTO v_lecturersenrollments_tab 
    FROM   enrollment 
			LEFT JOIN subject ON enrollment.subject_id = subject.id
			LEFT JOIN lecturer ON subject.lecturer_id = lecturer.id
		    WHERE  lecturer.id = lecturerId ; 
    RETURN v_lecturersenrollments_tab; 
END;
/

select select_lecturer_enrollments('1') from dual;






CREATE OR replace TYPE lecturerspartialmarks AS object(
	partialmark      NUMBER (2,1), 
    issuedate		 DATE,
	subject_name     VARCHAR2 (256));
/
CREATE TYPE lecturerspartialmarks_tab AS TABLE OF lecturerspartialmarks;
  
  
/ 
create or replace 
FUNCTION select_lecturer_partialmarks(lecturerId IN lecturer.id%TYPE) 
RETURN lecturerspartialmarks_tab
IS 
  v_lecturerspartialmarks_tab lecturerspartialmarks_tab := lecturerspartialmarks_tab(); 
BEGIN 
    SELECT lecturerspartialmarks(partial_mark.mark, partial_mark.issue_date, subject.name)
    bulk  collect      INTO v_lecturerspartialmarks_tab 
    FROM   partial_mark 
            LEFT JOIN subject ON partial_mark.subject_id = subject.id
			LEFT JOIN lecturer ON subject.lecturer_id = lecturer.id
		    WHERE  lecturer.id = lecturerId ; 
    RETURN v_lecturerspartialmarks_tab; 
END;
/

select select_lecturer_partialmarks('1') from dual;






CREATE OR replace TYPE slearningmaterials AS object(
	sname	         VARCHAR2 (256), 
    sdescription	 VARCHAR2 (256),
	filelink		 BFILE);
/
CREATE TYPE slearningmaterials_tab AS TABLE OF slearningmaterials;
  
  
/ 
create or replace 
FUNCTION select_slearningmaterials(studentId IN student.id%TYPE) 
RETURN slearningmaterials_tab
IS 
  v_slearningmaterials_tab slearningmaterials_tab := slearningmaterials_tab(); 
BEGIN 
    SELECT slearningmaterials(learning_materials.name, learning_materials.description, learning_materials.file_link)
    bulk  collect      INTO v_slearningmaterials_tab 
    FROM   learning_materials 
            LEFT JOIN subject ON learning_materials.subject_id = subject.id
			LEFT JOIN students_group_subject ON students_group_subject.subject_id = subject.id
			LEFT JOIN students_group ON students_group_subject.students_group_id = students_group.id
			LEFT JOIN students_group_student ON students_group_student.students_group_id = students_group.id
			LEFT JOIN student ON student.id = students_group_student.student_id
			WHERE student.id = studentId; 
    RETURN v_slearningmaterials_tab; 
END;
/

select select_slearningmaterials('1') from dual;





CREATE OR replace TYPE llearningmaterials AS object(
	sname	         VARCHAR2 (256), 
    sdescription	 VARCHAR2 (256),
	filelink		 BFILE);
/
CREATE TYPE llearningmaterials_tab AS TABLE OF llearningmaterials;
  
  
/ 
create or replace 
FUNCTION select_llearningmaterials(lecturerId IN lecturer.id%TYPE) 
RETURN llearningmaterials_tab
IS 
  v_llearningmaterials_tab llearningmaterials_tab := llearningmaterials_tab(); 
BEGIN 
    SELECT llearningmaterials(learning_materials.name, learning_materials.description, learning_materials.file_link)
    bulk  collect      INTO v_llearningmaterials_tab 
    FROM   learning_materials 
            LEFT JOIN subject ON learning_materials.subject_id = subject.id
			LEFT JOIN lecturer ON subject.lecturer_id = lecturer.id
			WHERE lecturer.id = lecturerId; 
    RETURN v_llearningmaterials_tab; 
END;
/

select select_llearningmaterials('1') from dual;